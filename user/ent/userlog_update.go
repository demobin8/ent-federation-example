// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"user/ent/predicate"
	"user/ent/userlog"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLogUpdate is the builder for updating UserLog entities.
type UserLogUpdate struct {
	config
	hooks    []Hook
	mutation *UserLogMutation
}

// Where adds a new predicate for the UserLogUpdate builder.
func (ulu *UserLogUpdate) Where(ps ...predicate.UserLog) *UserLogUpdate {
	ulu.mutation.predicates = append(ulu.mutation.predicates, ps...)
	return ulu
}

// SetIP sets the "ip" field.
func (ulu *UserLogUpdate) SetIP(s string) *UserLogUpdate {
	ulu.mutation.SetIP(s)
	return ulu
}

// SetRemark sets the "remark" field.
func (ulu *UserLogUpdate) SetRemark(s string) *UserLogUpdate {
	ulu.mutation.SetRemark(s)
	return ulu
}

// SetCreateAt sets the "create_at" field.
func (ulu *UserLogUpdate) SetCreateAt(t time.Time) *UserLogUpdate {
	ulu.mutation.SetCreateAt(t)
	return ulu
}

// Mutation returns the UserLogMutation object of the builder.
func (ulu *UserLogUpdate) Mutation() *UserLogMutation {
	return ulu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UserLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ulu.hooks) == 0 {
		affected, err = ulu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulu.mutation = mutation
			affected, err = ulu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ulu.hooks) - 1; i >= 0; i-- {
			mut = ulu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLogUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLogUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLogUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ulu *UserLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlog.Table,
			Columns: userlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlog.FieldID,
			},
		},
	}
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlog.FieldIP,
		})
	}
	if value, ok := ulu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlog.FieldRemark,
		})
	}
	if value, ok := ulu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlog.FieldCreateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserLogUpdateOne is the builder for updating a single UserLog entity.
type UserLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLogMutation
}

// SetIP sets the "ip" field.
func (uluo *UserLogUpdateOne) SetIP(s string) *UserLogUpdateOne {
	uluo.mutation.SetIP(s)
	return uluo
}

// SetRemark sets the "remark" field.
func (uluo *UserLogUpdateOne) SetRemark(s string) *UserLogUpdateOne {
	uluo.mutation.SetRemark(s)
	return uluo
}

// SetCreateAt sets the "create_at" field.
func (uluo *UserLogUpdateOne) SetCreateAt(t time.Time) *UserLogUpdateOne {
	uluo.mutation.SetCreateAt(t)
	return uluo
}

// Mutation returns the UserLogMutation object of the builder.
func (uluo *UserLogUpdateOne) Mutation() *UserLogMutation {
	return uluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UserLogUpdateOne) Select(field string, fields ...string) *UserLogUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UserLog entity.
func (uluo *UserLogUpdateOne) Save(ctx context.Context) (*UserLog, error) {
	var (
		err  error
		node *UserLog
	)
	if len(uluo.hooks) == 0 {
		node, err = uluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uluo.mutation = mutation
			node, err = uluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uluo.hooks) - 1; i >= 0; i-- {
			mut = uluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLogUpdateOne) SaveX(ctx context.Context) *UserLog {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UserLogUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLogUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uluo *UserLogUpdateOne) sqlSave(ctx context.Context) (_node *UserLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlog.Table,
			Columns: userlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlog.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlog.FieldID)
		for _, f := range fields {
			if !userlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlog.FieldIP,
		})
	}
	if value, ok := uluo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlog.FieldRemark,
		})
	}
	if value, ok := uluo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlog.FieldCreateAt,
		})
	}
	_node = &UserLog{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
