// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"user/ent/useropinfo"

	"entgo.io/ent/dialect/sql"
)

// UserOpInfo is the model entity for the UserOpInfo schema.
type UserOpInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone             string `json:"phone,omitempty"`
	user_user_op_info *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOpInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useropinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case useropinfo.FieldPhone:
			values[i] = new(sql.NullString)
		case useropinfo.ForeignKeys[0]: // user_user_op_info
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserOpInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOpInfo fields.
func (uoi *UserOpInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useropinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uoi.ID = int(value.Int64)
		case useropinfo.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				uoi.Phone = value.String
			}
		case useropinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_op_info", value)
			} else if value.Valid {
				uoi.user_user_op_info = new(int)
				*uoi.user_user_op_info = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserOpInfo.
// Note that you need to call UserOpInfo.Unwrap() before calling this method if this UserOpInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (uoi *UserOpInfo) Update() *UserOpInfoUpdateOne {
	return (&UserOpInfoClient{config: uoi.config}).UpdateOne(uoi)
}

// Unwrap unwraps the UserOpInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uoi *UserOpInfo) Unwrap() *UserOpInfo {
	tx, ok := uoi.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOpInfo is not a transactional entity")
	}
	uoi.config.driver = tx.drv
	return uoi
}

// String implements the fmt.Stringer.
func (uoi *UserOpInfo) String() string {
	var builder strings.Builder
	builder.WriteString("UserOpInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", uoi.ID))
	builder.WriteString(", phone=")
	builder.WriteString(uoi.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// UserOpInfos is a parsable slice of UserOpInfo.
type UserOpInfos []*UserOpInfo

func (uoi UserOpInfos) config(cfg config) {
	for _i := range uoi {
		uoi[_i].config = cfg
	}
}
