// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"user/ent/useroainfo"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOaInfoCreate is the builder for creating a UserOaInfo entity.
type UserOaInfoCreate struct {
	config
	mutation *UserOaInfoMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (uoic *UserOaInfoCreate) SetEmail(s string) *UserOaInfoCreate {
	uoic.mutation.SetEmail(s)
	return uoic
}

// SetEmailPwd sets the "email_pwd" field.
func (uoic *UserOaInfoCreate) SetEmailPwd(s string) *UserOaInfoCreate {
	uoic.mutation.SetEmailPwd(s)
	return uoic
}

// Mutation returns the UserOaInfoMutation object of the builder.
func (uoic *UserOaInfoCreate) Mutation() *UserOaInfoMutation {
	return uoic.mutation
}

// Save creates the UserOaInfo in the database.
func (uoic *UserOaInfoCreate) Save(ctx context.Context) (*UserOaInfo, error) {
	var (
		err  error
		node *UserOaInfo
	)
	if len(uoic.hooks) == 0 {
		if err = uoic.check(); err != nil {
			return nil, err
		}
		node, err = uoic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOaInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uoic.check(); err != nil {
				return nil, err
			}
			uoic.mutation = mutation
			node, err = uoic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uoic.hooks) - 1; i >= 0; i-- {
			mut = uoic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uoic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uoic *UserOaInfoCreate) SaveX(ctx context.Context) *UserOaInfo {
	v, err := uoic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (uoic *UserOaInfoCreate) check() error {
	if _, ok := uoic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if _, ok := uoic.mutation.EmailPwd(); !ok {
		return &ValidationError{Name: "email_pwd", err: errors.New("ent: missing required field \"email_pwd\"")}
	}
	return nil
}

func (uoic *UserOaInfoCreate) sqlSave(ctx context.Context) (*UserOaInfo, error) {
	_node, _spec := uoic.createSpec()
	if err := sqlgraph.CreateNode(ctx, uoic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uoic *UserOaInfoCreate) createSpec() (*UserOaInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &UserOaInfo{config: uoic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useroainfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useroainfo.FieldID,
			},
		}
	)
	if value, ok := uoic.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useroainfo.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uoic.mutation.EmailPwd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useroainfo.FieldEmailPwd,
		})
		_node.EmailPwd = value
	}
	return _node, _spec
}

// UserOaInfoCreateBulk is the builder for creating many UserOaInfo entities in bulk.
type UserOaInfoCreateBulk struct {
	config
	builders []*UserOaInfoCreate
}

// Save creates the UserOaInfo entities in the database.
func (uoicb *UserOaInfoCreateBulk) Save(ctx context.Context) ([]*UserOaInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uoicb.builders))
	nodes := make([]*UserOaInfo, len(uoicb.builders))
	mutators := make([]Mutator, len(uoicb.builders))
	for i := range uoicb.builders {
		func(i int, root context.Context) {
			builder := uoicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserOaInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uoicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uoicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uoicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uoicb *UserOaInfoCreateBulk) SaveX(ctx context.Context) []*UserOaInfo {
	v, err := uoicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
