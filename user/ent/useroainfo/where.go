// Code generated by entc, DO NOT EDIT.

package useroainfo

import (
	"user/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailPwd applies equality check predicate on the "email_pwd" field. It's identical to EmailPwdEQ.
func EmailPwd(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailPwd), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.UserOaInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOaInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.UserOaInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOaInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// EmailPwdEQ applies the EQ predicate on the "email_pwd" field.
func EmailPwdEQ(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdNEQ applies the NEQ predicate on the "email_pwd" field.
func EmailPwdNEQ(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdIn applies the In predicate on the "email_pwd" field.
func EmailPwdIn(vs ...string) predicate.UserOaInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOaInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmailPwd), v...))
	})
}

// EmailPwdNotIn applies the NotIn predicate on the "email_pwd" field.
func EmailPwdNotIn(vs ...string) predicate.UserOaInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOaInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmailPwd), v...))
	})
}

// EmailPwdGT applies the GT predicate on the "email_pwd" field.
func EmailPwdGT(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdGTE applies the GTE predicate on the "email_pwd" field.
func EmailPwdGTE(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdLT applies the LT predicate on the "email_pwd" field.
func EmailPwdLT(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdLTE applies the LTE predicate on the "email_pwd" field.
func EmailPwdLTE(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdContains applies the Contains predicate on the "email_pwd" field.
func EmailPwdContains(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdHasPrefix applies the HasPrefix predicate on the "email_pwd" field.
func EmailPwdHasPrefix(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdHasSuffix applies the HasSuffix predicate on the "email_pwd" field.
func EmailPwdHasSuffix(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdEqualFold applies the EqualFold predicate on the "email_pwd" field.
func EmailPwdEqualFold(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmailPwd), v))
	})
}

// EmailPwdContainsFold applies the ContainsFold predicate on the "email_pwd" field.
func EmailPwdContainsFold(v string) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmailPwd), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserOaInfo) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserOaInfo) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserOaInfo) predicate.UserOaInfo {
	return predicate.UserOaInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
