// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"
	"user/ent/user"
	"user/ent/userlog"
	"user/ent/useroainfo"
	"user/ent/useropinfo"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldName orders User by name.
	UserOrderFieldName = &UserOrderField{
		field: user.FieldName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Name,
			}
		},
	}
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldName:
		str = "NAME"
	case user.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *UserOrderFieldName
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserLogEdge is the edge representation of UserLog.
type UserLogEdge struct {
	Node   *UserLog `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// UserLogConnection is the connection containing edges to UserLog.
type UserLogConnection struct {
	Edges      []*UserLogEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// UserLogPaginateOption enables pagination customization.
type UserLogPaginateOption func(*userLogPager) error

// WithUserLogOrder configures pagination ordering.
func WithUserLogOrder(order *UserLogOrder) UserLogPaginateOption {
	if order == nil {
		order = DefaultUserLogOrder
	}
	o := *order
	return func(pager *userLogPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserLogOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserLogFilter configures pagination filter.
func WithUserLogFilter(filter func(*UserLogQuery) (*UserLogQuery, error)) UserLogPaginateOption {
	return func(pager *userLogPager) error {
		if filter == nil {
			return errors.New("UserLogQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userLogPager struct {
	order  *UserLogOrder
	filter func(*UserLogQuery) (*UserLogQuery, error)
}

func newUserLogPager(opts []UserLogPaginateOption) (*userLogPager, error) {
	pager := &userLogPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserLogOrder
	}
	return pager, nil
}

func (p *userLogPager) applyFilter(query *UserLogQuery) (*UserLogQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userLogPager) toCursor(ul *UserLog) Cursor {
	return p.order.Field.toCursor(ul)
}

func (p *userLogPager) applyCursors(query *UserLogQuery, after, before *Cursor) *UserLogQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserLogOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userLogPager) applyOrder(query *UserLogQuery, reverse bool) *UserLogQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserLogOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserLogOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to UserLog.
func (ul *UserLogQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserLogPaginateOption,
) (*UserLogConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserLogPager(opts)
	if err != nil {
		return nil, err
	}

	if ul, err = pager.applyFilter(ul); err != nil {
		return nil, err
	}

	conn := &UserLogConnection{Edges: []*UserLogEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ul.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ul.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ul = pager.applyCursors(ul, after, before)
	ul = pager.applyOrder(ul, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ul = ul.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ul = ul.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ul.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *UserLog
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserLog {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserLog {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserLogEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserLogEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// UserLogOrderField defines the ordering field of UserLog.
type UserLogOrderField struct {
	field    string
	toCursor func(*UserLog) Cursor
}

// UserLogOrder defines the ordering of UserLog.
type UserLogOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *UserLogOrderField `json:"field"`
}

// DefaultUserLogOrder is the default ordering of UserLog.
var DefaultUserLogOrder = &UserLogOrder{
	Direction: OrderDirectionAsc,
	Field: &UserLogOrderField{
		field: userlog.FieldID,
		toCursor: func(ul *UserLog) Cursor {
			return Cursor{ID: ul.ID}
		},
	},
}

// ToEdge converts UserLog into UserLogEdge.
func (ul *UserLog) ToEdge(order *UserLogOrder) *UserLogEdge {
	if order == nil {
		order = DefaultUserLogOrder
	}
	return &UserLogEdge{
		Node:   ul,
		Cursor: order.Field.toCursor(ul),
	}
}

// UserOaInfoEdge is the edge representation of UserOaInfo.
type UserOaInfoEdge struct {
	Node   *UserOaInfo `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// UserOaInfoConnection is the connection containing edges to UserOaInfo.
type UserOaInfoConnection struct {
	Edges      []*UserOaInfoEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// UserOaInfoPaginateOption enables pagination customization.
type UserOaInfoPaginateOption func(*userOaInfoPager) error

// WithUserOaInfoOrder configures pagination ordering.
func WithUserOaInfoOrder(order *UserOaInfoOrder) UserOaInfoPaginateOption {
	if order == nil {
		order = DefaultUserOaInfoOrder
	}
	o := *order
	return func(pager *userOaInfoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOaInfoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserOaInfoFilter configures pagination filter.
func WithUserOaInfoFilter(filter func(*UserOaInfoQuery) (*UserOaInfoQuery, error)) UserOaInfoPaginateOption {
	return func(pager *userOaInfoPager) error {
		if filter == nil {
			return errors.New("UserOaInfoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userOaInfoPager struct {
	order  *UserOaInfoOrder
	filter func(*UserOaInfoQuery) (*UserOaInfoQuery, error)
}

func newUserOaInfoPager(opts []UserOaInfoPaginateOption) (*userOaInfoPager, error) {
	pager := &userOaInfoPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOaInfoOrder
	}
	return pager, nil
}

func (p *userOaInfoPager) applyFilter(query *UserOaInfoQuery) (*UserOaInfoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userOaInfoPager) toCursor(uoi *UserOaInfo) Cursor {
	return p.order.Field.toCursor(uoi)
}

func (p *userOaInfoPager) applyCursors(query *UserOaInfoQuery, after, before *Cursor) *UserOaInfoQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOaInfoOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userOaInfoPager) applyOrder(query *UserOaInfoQuery, reverse bool) *UserOaInfoQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOaInfoOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOaInfoOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to UserOaInfo.
func (uoi *UserOaInfoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserOaInfoPaginateOption,
) (*UserOaInfoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserOaInfoPager(opts)
	if err != nil {
		return nil, err
	}

	if uoi, err = pager.applyFilter(uoi); err != nil {
		return nil, err
	}

	conn := &UserOaInfoConnection{Edges: []*UserOaInfoEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := uoi.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := uoi.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	uoi = pager.applyCursors(uoi, after, before)
	uoi = pager.applyOrder(uoi, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		uoi = uoi.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		uoi = uoi.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := uoi.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *UserOaInfo
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserOaInfo {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserOaInfo {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserOaInfoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserOaInfoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// UserOaInfoOrderField defines the ordering field of UserOaInfo.
type UserOaInfoOrderField struct {
	field    string
	toCursor func(*UserOaInfo) Cursor
}

// UserOaInfoOrder defines the ordering of UserOaInfo.
type UserOaInfoOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *UserOaInfoOrderField `json:"field"`
}

// DefaultUserOaInfoOrder is the default ordering of UserOaInfo.
var DefaultUserOaInfoOrder = &UserOaInfoOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOaInfoOrderField{
		field: useroainfo.FieldID,
		toCursor: func(uoi *UserOaInfo) Cursor {
			return Cursor{ID: uoi.ID}
		},
	},
}

// ToEdge converts UserOaInfo into UserOaInfoEdge.
func (uoi *UserOaInfo) ToEdge(order *UserOaInfoOrder) *UserOaInfoEdge {
	if order == nil {
		order = DefaultUserOaInfoOrder
	}
	return &UserOaInfoEdge{
		Node:   uoi,
		Cursor: order.Field.toCursor(uoi),
	}
}

// UserOpInfoEdge is the edge representation of UserOpInfo.
type UserOpInfoEdge struct {
	Node   *UserOpInfo `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// UserOpInfoConnection is the connection containing edges to UserOpInfo.
type UserOpInfoConnection struct {
	Edges      []*UserOpInfoEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// UserOpInfoPaginateOption enables pagination customization.
type UserOpInfoPaginateOption func(*userOpInfoPager) error

// WithUserOpInfoOrder configures pagination ordering.
func WithUserOpInfoOrder(order *UserOpInfoOrder) UserOpInfoPaginateOption {
	if order == nil {
		order = DefaultUserOpInfoOrder
	}
	o := *order
	return func(pager *userOpInfoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOpInfoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserOpInfoFilter configures pagination filter.
func WithUserOpInfoFilter(filter func(*UserOpInfoQuery) (*UserOpInfoQuery, error)) UserOpInfoPaginateOption {
	return func(pager *userOpInfoPager) error {
		if filter == nil {
			return errors.New("UserOpInfoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userOpInfoPager struct {
	order  *UserOpInfoOrder
	filter func(*UserOpInfoQuery) (*UserOpInfoQuery, error)
}

func newUserOpInfoPager(opts []UserOpInfoPaginateOption) (*userOpInfoPager, error) {
	pager := &userOpInfoPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOpInfoOrder
	}
	return pager, nil
}

func (p *userOpInfoPager) applyFilter(query *UserOpInfoQuery) (*UserOpInfoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userOpInfoPager) toCursor(uoi *UserOpInfo) Cursor {
	return p.order.Field.toCursor(uoi)
}

func (p *userOpInfoPager) applyCursors(query *UserOpInfoQuery, after, before *Cursor) *UserOpInfoQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOpInfoOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userOpInfoPager) applyOrder(query *UserOpInfoQuery, reverse bool) *UserOpInfoQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOpInfoOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOpInfoOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to UserOpInfo.
func (uoi *UserOpInfoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserOpInfoPaginateOption,
) (*UserOpInfoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserOpInfoPager(opts)
	if err != nil {
		return nil, err
	}

	if uoi, err = pager.applyFilter(uoi); err != nil {
		return nil, err
	}

	conn := &UserOpInfoConnection{Edges: []*UserOpInfoEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := uoi.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := uoi.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	uoi = pager.applyCursors(uoi, after, before)
	uoi = pager.applyOrder(uoi, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		uoi = uoi.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		uoi = uoi.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := uoi.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *UserOpInfo
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserOpInfo {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserOpInfo {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserOpInfoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserOpInfoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// UserOpInfoOrderField defines the ordering field of UserOpInfo.
type UserOpInfoOrderField struct {
	field    string
	toCursor func(*UserOpInfo) Cursor
}

// UserOpInfoOrder defines the ordering of UserOpInfo.
type UserOpInfoOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *UserOpInfoOrderField `json:"field"`
}

// DefaultUserOpInfoOrder is the default ordering of UserOpInfo.
var DefaultUserOpInfoOrder = &UserOpInfoOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOpInfoOrderField{
		field: useropinfo.FieldID,
		toCursor: func(uoi *UserOpInfo) Cursor {
			return Cursor{ID: uoi.ID}
		},
	},
}

// ToEdge converts UserOpInfo into UserOpInfoEdge.
func (uoi *UserOpInfo) ToEdge(order *UserOpInfoOrder) *UserOpInfoEdge {
	if order == nil {
		order = DefaultUserOpInfoOrder
	}
	return &UserOpInfoEdge{
		Node:   uoi,
		Cursor: order.Field.toCursor(uoi),
	}
}
