// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"user/ent/predicate"
	"user/ent/useropinfo"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOpInfoUpdate is the builder for updating UserOpInfo entities.
type UserOpInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserOpInfoMutation
}

// Where adds a new predicate for the UserOpInfoUpdate builder.
func (uoiu *UserOpInfoUpdate) Where(ps ...predicate.UserOpInfo) *UserOpInfoUpdate {
	uoiu.mutation.predicates = append(uoiu.mutation.predicates, ps...)
	return uoiu
}

// SetPhone sets the "phone" field.
func (uoiu *UserOpInfoUpdate) SetPhone(s string) *UserOpInfoUpdate {
	uoiu.mutation.SetPhone(s)
	return uoiu
}

// Mutation returns the UserOpInfoMutation object of the builder.
func (uoiu *UserOpInfoUpdate) Mutation() *UserOpInfoMutation {
	return uoiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uoiu *UserOpInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uoiu.hooks) == 0 {
		affected, err = uoiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOpInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uoiu.mutation = mutation
			affected, err = uoiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uoiu.hooks) - 1; i >= 0; i-- {
			mut = uoiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uoiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uoiu *UserOpInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := uoiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uoiu *UserOpInfoUpdate) Exec(ctx context.Context) error {
	_, err := uoiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uoiu *UserOpInfoUpdate) ExecX(ctx context.Context) {
	if err := uoiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uoiu *UserOpInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useropinfo.Table,
			Columns: useropinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useropinfo.FieldID,
			},
		},
	}
	if ps := uoiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uoiu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useropinfo.FieldPhone,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uoiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useropinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserOpInfoUpdateOne is the builder for updating a single UserOpInfo entity.
type UserOpInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserOpInfoMutation
}

// SetPhone sets the "phone" field.
func (uoiuo *UserOpInfoUpdateOne) SetPhone(s string) *UserOpInfoUpdateOne {
	uoiuo.mutation.SetPhone(s)
	return uoiuo
}

// Mutation returns the UserOpInfoMutation object of the builder.
func (uoiuo *UserOpInfoUpdateOne) Mutation() *UserOpInfoMutation {
	return uoiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uoiuo *UserOpInfoUpdateOne) Select(field string, fields ...string) *UserOpInfoUpdateOne {
	uoiuo.fields = append([]string{field}, fields...)
	return uoiuo
}

// Save executes the query and returns the updated UserOpInfo entity.
func (uoiuo *UserOpInfoUpdateOne) Save(ctx context.Context) (*UserOpInfo, error) {
	var (
		err  error
		node *UserOpInfo
	)
	if len(uoiuo.hooks) == 0 {
		node, err = uoiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOpInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uoiuo.mutation = mutation
			node, err = uoiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uoiuo.hooks) - 1; i >= 0; i-- {
			mut = uoiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uoiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uoiuo *UserOpInfoUpdateOne) SaveX(ctx context.Context) *UserOpInfo {
	node, err := uoiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uoiuo *UserOpInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := uoiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uoiuo *UserOpInfoUpdateOne) ExecX(ctx context.Context) {
	if err := uoiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uoiuo *UserOpInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserOpInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useropinfo.Table,
			Columns: useropinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useropinfo.FieldID,
			},
		},
	}
	id, ok := uoiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserOpInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uoiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useropinfo.FieldID)
		for _, f := range fields {
			if !useropinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useropinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uoiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uoiuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useropinfo.FieldPhone,
		})
	}
	_node = &UserOpInfo{config: uoiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uoiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useropinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
