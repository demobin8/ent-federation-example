// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"
	"user/ent/predicate"
	"user/ent/user"
	"user/ent/userlog"
	"user/ent/useroainfo"
	"user/ent/useropinfo"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser       = "User"
	TypeUserLog    = "UserLog"
	TypeUserOaInfo = "UserOaInfo"
	TypeUserOpInfo = "UserOpInfo"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	age               *int
	addage            *int
	name              *string
	username          *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	userLogs          map[int]struct{}
	removeduserLogs   map[int]struct{}
	cleareduserLogs   bool
	userOaInfo        map[int]struct{}
	removeduserOaInfo map[int]struct{}
	cleareduserOaInfo bool
	userOpInfo        map[int]struct{}
	removeduserOpInfo map[int]struct{}
	cleareduserOpInfo bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddUserLogIDs adds the "userLogs" edge to the UserLog entity by ids.
func (m *UserMutation) AddUserLogIDs(ids ...int) {
	if m.userLogs == nil {
		m.userLogs = make(map[int]struct{})
	}
	for i := range ids {
		m.userLogs[ids[i]] = struct{}{}
	}
}

// ClearUserLogs clears the "userLogs" edge to the UserLog entity.
func (m *UserMutation) ClearUserLogs() {
	m.cleareduserLogs = true
}

// UserLogsCleared reports if the "userLogs" edge to the UserLog entity was cleared.
func (m *UserMutation) UserLogsCleared() bool {
	return m.cleareduserLogs
}

// RemoveUserLogIDs removes the "userLogs" edge to the UserLog entity by IDs.
func (m *UserMutation) RemoveUserLogIDs(ids ...int) {
	if m.removeduserLogs == nil {
		m.removeduserLogs = make(map[int]struct{})
	}
	for i := range ids {
		m.removeduserLogs[ids[i]] = struct{}{}
	}
}

// RemovedUserLogs returns the removed IDs of the "userLogs" edge to the UserLog entity.
func (m *UserMutation) RemovedUserLogsIDs() (ids []int) {
	for id := range m.removeduserLogs {
		ids = append(ids, id)
	}
	return
}

// UserLogsIDs returns the "userLogs" edge IDs in the mutation.
func (m *UserMutation) UserLogsIDs() (ids []int) {
	for id := range m.userLogs {
		ids = append(ids, id)
	}
	return
}

// ResetUserLogs resets all changes to the "userLogs" edge.
func (m *UserMutation) ResetUserLogs() {
	m.userLogs = nil
	m.cleareduserLogs = false
	m.removeduserLogs = nil
}

// AddUserOaInfoIDs adds the "userOaInfo" edge to the UserOaInfo entity by ids.
func (m *UserMutation) AddUserOaInfoIDs(ids ...int) {
	if m.userOaInfo == nil {
		m.userOaInfo = make(map[int]struct{})
	}
	for i := range ids {
		m.userOaInfo[ids[i]] = struct{}{}
	}
}

// ClearUserOaInfo clears the "userOaInfo" edge to the UserOaInfo entity.
func (m *UserMutation) ClearUserOaInfo() {
	m.cleareduserOaInfo = true
}

// UserOaInfoCleared reports if the "userOaInfo" edge to the UserOaInfo entity was cleared.
func (m *UserMutation) UserOaInfoCleared() bool {
	return m.cleareduserOaInfo
}

// RemoveUserOaInfoIDs removes the "userOaInfo" edge to the UserOaInfo entity by IDs.
func (m *UserMutation) RemoveUserOaInfoIDs(ids ...int) {
	if m.removeduserOaInfo == nil {
		m.removeduserOaInfo = make(map[int]struct{})
	}
	for i := range ids {
		m.removeduserOaInfo[ids[i]] = struct{}{}
	}
}

// RemovedUserOaInfo returns the removed IDs of the "userOaInfo" edge to the UserOaInfo entity.
func (m *UserMutation) RemovedUserOaInfoIDs() (ids []int) {
	for id := range m.removeduserOaInfo {
		ids = append(ids, id)
	}
	return
}

// UserOaInfoIDs returns the "userOaInfo" edge IDs in the mutation.
func (m *UserMutation) UserOaInfoIDs() (ids []int) {
	for id := range m.userOaInfo {
		ids = append(ids, id)
	}
	return
}

// ResetUserOaInfo resets all changes to the "userOaInfo" edge.
func (m *UserMutation) ResetUserOaInfo() {
	m.userOaInfo = nil
	m.cleareduserOaInfo = false
	m.removeduserOaInfo = nil
}

// AddUserOpInfoIDs adds the "userOpInfo" edge to the UserOpInfo entity by ids.
func (m *UserMutation) AddUserOpInfoIDs(ids ...int) {
	if m.userOpInfo == nil {
		m.userOpInfo = make(map[int]struct{})
	}
	for i := range ids {
		m.userOpInfo[ids[i]] = struct{}{}
	}
}

// ClearUserOpInfo clears the "userOpInfo" edge to the UserOpInfo entity.
func (m *UserMutation) ClearUserOpInfo() {
	m.cleareduserOpInfo = true
}

// UserOpInfoCleared reports if the "userOpInfo" edge to the UserOpInfo entity was cleared.
func (m *UserMutation) UserOpInfoCleared() bool {
	return m.cleareduserOpInfo
}

// RemoveUserOpInfoIDs removes the "userOpInfo" edge to the UserOpInfo entity by IDs.
func (m *UserMutation) RemoveUserOpInfoIDs(ids ...int) {
	if m.removeduserOpInfo == nil {
		m.removeduserOpInfo = make(map[int]struct{})
	}
	for i := range ids {
		m.removeduserOpInfo[ids[i]] = struct{}{}
	}
}

// RemovedUserOpInfo returns the removed IDs of the "userOpInfo" edge to the UserOpInfo entity.
func (m *UserMutation) RemovedUserOpInfoIDs() (ids []int) {
	for id := range m.removeduserOpInfo {
		ids = append(ids, id)
	}
	return
}

// UserOpInfoIDs returns the "userOpInfo" edge IDs in the mutation.
func (m *UserMutation) UserOpInfoIDs() (ids []int) {
	for id := range m.userOpInfo {
		ids = append(ids, id)
	}
	return
}

// ResetUserOpInfo resets all changes to the "userOpInfo" edge.
func (m *UserMutation) ResetUserOpInfo() {
	m.userOpInfo = nil
	m.cleareduserOpInfo = false
	m.removeduserOpInfo = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	case user.FieldUsername:
		return m.Username()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.userLogs != nil {
		edges = append(edges, user.EdgeUserLogs)
	}
	if m.userOaInfo != nil {
		edges = append(edges, user.EdgeUserOaInfo)
	}
	if m.userOpInfo != nil {
		edges = append(edges, user.EdgeUserOpInfo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserLogs:
		ids := make([]ent.Value, 0, len(m.userLogs))
		for id := range m.userLogs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserOaInfo:
		ids := make([]ent.Value, 0, len(m.userOaInfo))
		for id := range m.userOaInfo {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserOpInfo:
		ids := make([]ent.Value, 0, len(m.userOpInfo))
		for id := range m.userOpInfo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeduserLogs != nil {
		edges = append(edges, user.EdgeUserLogs)
	}
	if m.removeduserOaInfo != nil {
		edges = append(edges, user.EdgeUserOaInfo)
	}
	if m.removeduserOpInfo != nil {
		edges = append(edges, user.EdgeUserOpInfo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserLogs:
		ids := make([]ent.Value, 0, len(m.removeduserLogs))
		for id := range m.removeduserLogs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserOaInfo:
		ids := make([]ent.Value, 0, len(m.removeduserOaInfo))
		for id := range m.removeduserOaInfo {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserOpInfo:
		ids := make([]ent.Value, 0, len(m.removeduserOpInfo))
		for id := range m.removeduserOpInfo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduserLogs {
		edges = append(edges, user.EdgeUserLogs)
	}
	if m.cleareduserOaInfo {
		edges = append(edges, user.EdgeUserOaInfo)
	}
	if m.cleareduserOpInfo {
		edges = append(edges, user.EdgeUserOpInfo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserLogs:
		return m.cleareduserLogs
	case user.EdgeUserOaInfo:
		return m.cleareduserOaInfo
	case user.EdgeUserOpInfo:
		return m.cleareduserOpInfo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserLogs:
		m.ResetUserLogs()
		return nil
	case user.EdgeUserOaInfo:
		m.ResetUserOaInfo()
		return nil
	case user.EdgeUserOpInfo:
		m.ResetUserOpInfo()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserLogMutation represents an operation that mutates the UserLog nodes in the graph.
type UserLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ip            *string
	remark        *string
	create_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserLog, error)
	predicates    []predicate.UserLog
}

var _ ent.Mutation = (*UserLogMutation)(nil)

// userlogOption allows management of the mutation configuration using functional options.
type userlogOption func(*UserLogMutation)

// newUserLogMutation creates new mutation for the UserLog entity.
func newUserLogMutation(c config, op Op, opts ...userlogOption) *UserLogMutation {
	m := &UserLogMutation{
		config:        c,
		op:            op,
		typ:           TypeUserLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserLogID sets the ID field of the mutation.
func withUserLogID(id int) userlogOption {
	return func(m *UserLogMutation) {
		var (
			err   error
			once  sync.Once
			value *UserLog
		)
		m.oldValue = func(ctx context.Context) (*UserLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserLog sets the old UserLog of the mutation.
func withUserLog(node *UserLog) userlogOption {
	return func(m *UserLogMutation) {
		m.oldValue = func(context.Context) (*UserLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIP sets the "ip" field.
func (m *UserLogMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *UserLogMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the UserLog entity.
// If the UserLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserLogMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *UserLogMutation) ResetIP() {
	m.ip = nil
}

// SetRemark sets the "remark" field.
func (m *UserLogMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *UserLogMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the UserLog entity.
// If the UserLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserLogMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *UserLogMutation) ResetRemark() {
	m.remark = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserLogMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserLogMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserLog entity.
// If the UserLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserLogMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserLogMutation) ResetCreateAt() {
	m.create_at = nil
}

// Op returns the operation name.
func (m *UserLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserLog).
func (m *UserLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserLogMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.ip != nil {
		fields = append(fields, userlog.FieldIP)
	}
	if m.remark != nil {
		fields = append(fields, userlog.FieldRemark)
	}
	if m.create_at != nil {
		fields = append(fields, userlog.FieldCreateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userlog.FieldIP:
		return m.IP()
	case userlog.FieldRemark:
		return m.Remark()
	case userlog.FieldCreateAt:
		return m.CreateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userlog.FieldIP:
		return m.OldIP(ctx)
	case userlog.FieldRemark:
		return m.OldRemark(ctx)
	case userlog.FieldCreateAt:
		return m.OldCreateAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userlog.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case userlog.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case userlog.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserLogMutation) ResetField(name string) error {
	switch name {
	case userlog.FieldIP:
		m.ResetIP()
		return nil
	case userlog.FieldRemark:
		m.ResetRemark()
		return nil
	case userlog.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	}
	return fmt.Errorf("unknown UserLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserLog edge %s", name)
}

// UserOaInfoMutation represents an operation that mutates the UserOaInfo nodes in the graph.
type UserOaInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	email_pwd     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserOaInfo, error)
	predicates    []predicate.UserOaInfo
}

var _ ent.Mutation = (*UserOaInfoMutation)(nil)

// useroainfoOption allows management of the mutation configuration using functional options.
type useroainfoOption func(*UserOaInfoMutation)

// newUserOaInfoMutation creates new mutation for the UserOaInfo entity.
func newUserOaInfoMutation(c config, op Op, opts ...useroainfoOption) *UserOaInfoMutation {
	m := &UserOaInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeUserOaInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserOaInfoID sets the ID field of the mutation.
func withUserOaInfoID(id int) useroainfoOption {
	return func(m *UserOaInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *UserOaInfo
		)
		m.oldValue = func(ctx context.Context) (*UserOaInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserOaInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserOaInfo sets the old UserOaInfo of the mutation.
func withUserOaInfo(node *UserOaInfo) useroainfoOption {
	return func(m *UserOaInfoMutation) {
		m.oldValue = func(context.Context) (*UserOaInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserOaInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserOaInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserOaInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the "email" field.
func (m *UserOaInfoMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserOaInfoMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the UserOaInfo entity.
// If the UserOaInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOaInfoMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserOaInfoMutation) ResetEmail() {
	m.email = nil
}

// SetEmailPwd sets the "email_pwd" field.
func (m *UserOaInfoMutation) SetEmailPwd(s string) {
	m.email_pwd = &s
}

// EmailPwd returns the value of the "email_pwd" field in the mutation.
func (m *UserOaInfoMutation) EmailPwd() (r string, exists bool) {
	v := m.email_pwd
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailPwd returns the old "email_pwd" field's value of the UserOaInfo entity.
// If the UserOaInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOaInfoMutation) OldEmailPwd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailPwd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailPwd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailPwd: %w", err)
	}
	return oldValue.EmailPwd, nil
}

// ResetEmailPwd resets all changes to the "email_pwd" field.
func (m *UserOaInfoMutation) ResetEmailPwd() {
	m.email_pwd = nil
}

// Op returns the operation name.
func (m *UserOaInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserOaInfo).
func (m *UserOaInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserOaInfoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.email != nil {
		fields = append(fields, useroainfo.FieldEmail)
	}
	if m.email_pwd != nil {
		fields = append(fields, useroainfo.FieldEmailPwd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserOaInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useroainfo.FieldEmail:
		return m.Email()
	case useroainfo.FieldEmailPwd:
		return m.EmailPwd()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserOaInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useroainfo.FieldEmail:
		return m.OldEmail(ctx)
	case useroainfo.FieldEmailPwd:
		return m.OldEmailPwd(ctx)
	}
	return nil, fmt.Errorf("unknown UserOaInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOaInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useroainfo.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case useroainfo.FieldEmailPwd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailPwd(v)
		return nil
	}
	return fmt.Errorf("unknown UserOaInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserOaInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserOaInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOaInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserOaInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserOaInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserOaInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserOaInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserOaInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserOaInfoMutation) ResetField(name string) error {
	switch name {
	case useroainfo.FieldEmail:
		m.ResetEmail()
		return nil
	case useroainfo.FieldEmailPwd:
		m.ResetEmailPwd()
		return nil
	}
	return fmt.Errorf("unknown UserOaInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserOaInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserOaInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserOaInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserOaInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserOaInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserOaInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserOaInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserOaInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserOaInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserOaInfo edge %s", name)
}

// UserOpInfoMutation represents an operation that mutates the UserOpInfo nodes in the graph.
type UserOpInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	phone         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserOpInfo, error)
	predicates    []predicate.UserOpInfo
}

var _ ent.Mutation = (*UserOpInfoMutation)(nil)

// useropinfoOption allows management of the mutation configuration using functional options.
type useropinfoOption func(*UserOpInfoMutation)

// newUserOpInfoMutation creates new mutation for the UserOpInfo entity.
func newUserOpInfoMutation(c config, op Op, opts ...useropinfoOption) *UserOpInfoMutation {
	m := &UserOpInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeUserOpInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserOpInfoID sets the ID field of the mutation.
func withUserOpInfoID(id int) useropinfoOption {
	return func(m *UserOpInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *UserOpInfo
		)
		m.oldValue = func(ctx context.Context) (*UserOpInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserOpInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserOpInfo sets the old UserOpInfo of the mutation.
func withUserOpInfo(node *UserOpInfo) useropinfoOption {
	return func(m *UserOpInfoMutation) {
		m.oldValue = func(context.Context) (*UserOpInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserOpInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserOpInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserOpInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPhone sets the "phone" field.
func (m *UserOpInfoMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserOpInfoMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the UserOpInfo entity.
// If the UserOpInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOpInfoMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserOpInfoMutation) ResetPhone() {
	m.phone = nil
}

// Op returns the operation name.
func (m *UserOpInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserOpInfo).
func (m *UserOpInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserOpInfoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.phone != nil {
		fields = append(fields, useropinfo.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserOpInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useropinfo.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserOpInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useropinfo.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown UserOpInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOpInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useropinfo.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown UserOpInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserOpInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserOpInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOpInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserOpInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserOpInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserOpInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserOpInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserOpInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserOpInfoMutation) ResetField(name string) error {
	switch name {
	case useropinfo.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown UserOpInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserOpInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserOpInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserOpInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserOpInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserOpInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserOpInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserOpInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserOpInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserOpInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserOpInfo edge %s", name)
}
