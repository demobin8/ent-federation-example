// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"user/ent/migrate"

	"user/ent/user"
	"user/ent/userlog"
	"user/ent/useroainfo"
	"user/ent/useropinfo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserLog is the client for interacting with the UserLog builders.
	UserLog *UserLogClient
	// UserOaInfo is the client for interacting with the UserOaInfo builders.
	UserOaInfo *UserOaInfoClient
	// UserOpInfo is the client for interacting with the UserOpInfo builders.
	UserOpInfo *UserOpInfoClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.User = NewUserClient(c.config)
	c.UserLog = NewUserLogClient(c.config)
	c.UserOaInfo = NewUserOaInfoClient(c.config)
	c.UserOpInfo = NewUserOpInfoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		User:       NewUserClient(cfg),
		UserLog:    NewUserLogClient(cfg),
		UserOaInfo: NewUserOaInfoClient(cfg),
		UserOpInfo: NewUserOpInfoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:     cfg,
		User:       NewUserClient(cfg),
		UserLog:    NewUserLogClient(cfg),
		UserOaInfo: NewUserOaInfoClient(cfg),
		UserOpInfo: NewUserOpInfoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		User.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.User.Use(hooks...)
	c.UserLog.Use(hooks...)
	c.UserOaInfo.Use(hooks...)
	c.UserOpInfo.Use(hooks...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserLogs queries the userLogs edge of a User.
func (c *UserClient) QueryUserLogs(u *User) *UserLogQuery {
	query := &UserLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userlog.Table, userlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserLogsTable, user.UserLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserOaInfo queries the userOaInfo edge of a User.
func (c *UserClient) QueryUserOaInfo(u *User) *UserOaInfoQuery {
	query := &UserOaInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useroainfo.Table, useroainfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserOaInfoTable, user.UserOaInfoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserOpInfo queries the userOpInfo edge of a User.
func (c *UserClient) QueryUserOpInfo(u *User) *UserOpInfoQuery {
	query := &UserOpInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useropinfo.Table, useropinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserOpInfoTable, user.UserOpInfoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserLogClient is a client for the UserLog schema.
type UserLogClient struct {
	config
}

// NewUserLogClient returns a client for the UserLog from the given config.
func NewUserLogClient(c config) *UserLogClient {
	return &UserLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlog.Hooks(f(g(h())))`.
func (c *UserLogClient) Use(hooks ...Hook) {
	c.hooks.UserLog = append(c.hooks.UserLog, hooks...)
}

// Create returns a create builder for UserLog.
func (c *UserLogClient) Create() *UserLogCreate {
	mutation := newUserLogMutation(c.config, OpCreate)
	return &UserLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLog entities.
func (c *UserLogClient) CreateBulk(builders ...*UserLogCreate) *UserLogCreateBulk {
	return &UserLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLog.
func (c *UserLogClient) Update() *UserLogUpdate {
	mutation := newUserLogMutation(c.config, OpUpdate)
	return &UserLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLogClient) UpdateOne(ul *UserLog) *UserLogUpdateOne {
	mutation := newUserLogMutation(c.config, OpUpdateOne, withUserLog(ul))
	return &UserLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLogClient) UpdateOneID(id int) *UserLogUpdateOne {
	mutation := newUserLogMutation(c.config, OpUpdateOne, withUserLogID(id))
	return &UserLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLog.
func (c *UserLogClient) Delete() *UserLogDelete {
	mutation := newUserLogMutation(c.config, OpDelete)
	return &UserLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLogClient) DeleteOne(ul *UserLog) *UserLogDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLogClient) DeleteOneID(id int) *UserLogDeleteOne {
	builder := c.Delete().Where(userlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLogDeleteOne{builder}
}

// Query returns a query builder for UserLog.
func (c *UserLogClient) Query() *UserLogQuery {
	return &UserLogQuery{
		config: c.config,
	}
}

// Get returns a UserLog entity by its id.
func (c *UserLogClient) Get(ctx context.Context, id int) (*UserLog, error) {
	return c.Query().Where(userlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLogClient) GetX(ctx context.Context, id int) *UserLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserLogClient) Hooks() []Hook {
	return c.hooks.UserLog
}

// UserOaInfoClient is a client for the UserOaInfo schema.
type UserOaInfoClient struct {
	config
}

// NewUserOaInfoClient returns a client for the UserOaInfo from the given config.
func NewUserOaInfoClient(c config) *UserOaInfoClient {
	return &UserOaInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useroainfo.Hooks(f(g(h())))`.
func (c *UserOaInfoClient) Use(hooks ...Hook) {
	c.hooks.UserOaInfo = append(c.hooks.UserOaInfo, hooks...)
}

// Create returns a create builder for UserOaInfo.
func (c *UserOaInfoClient) Create() *UserOaInfoCreate {
	mutation := newUserOaInfoMutation(c.config, OpCreate)
	return &UserOaInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserOaInfo entities.
func (c *UserOaInfoClient) CreateBulk(builders ...*UserOaInfoCreate) *UserOaInfoCreateBulk {
	return &UserOaInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserOaInfo.
func (c *UserOaInfoClient) Update() *UserOaInfoUpdate {
	mutation := newUserOaInfoMutation(c.config, OpUpdate)
	return &UserOaInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserOaInfoClient) UpdateOne(uoi *UserOaInfo) *UserOaInfoUpdateOne {
	mutation := newUserOaInfoMutation(c.config, OpUpdateOne, withUserOaInfo(uoi))
	return &UserOaInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserOaInfoClient) UpdateOneID(id int) *UserOaInfoUpdateOne {
	mutation := newUserOaInfoMutation(c.config, OpUpdateOne, withUserOaInfoID(id))
	return &UserOaInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserOaInfo.
func (c *UserOaInfoClient) Delete() *UserOaInfoDelete {
	mutation := newUserOaInfoMutation(c.config, OpDelete)
	return &UserOaInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserOaInfoClient) DeleteOne(uoi *UserOaInfo) *UserOaInfoDeleteOne {
	return c.DeleteOneID(uoi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserOaInfoClient) DeleteOneID(id int) *UserOaInfoDeleteOne {
	builder := c.Delete().Where(useroainfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserOaInfoDeleteOne{builder}
}

// Query returns a query builder for UserOaInfo.
func (c *UserOaInfoClient) Query() *UserOaInfoQuery {
	return &UserOaInfoQuery{
		config: c.config,
	}
}

// Get returns a UserOaInfo entity by its id.
func (c *UserOaInfoClient) Get(ctx context.Context, id int) (*UserOaInfo, error) {
	return c.Query().Where(useroainfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserOaInfoClient) GetX(ctx context.Context, id int) *UserOaInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserOaInfoClient) Hooks() []Hook {
	return c.hooks.UserOaInfo
}

// UserOpInfoClient is a client for the UserOpInfo schema.
type UserOpInfoClient struct {
	config
}

// NewUserOpInfoClient returns a client for the UserOpInfo from the given config.
func NewUserOpInfoClient(c config) *UserOpInfoClient {
	return &UserOpInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useropinfo.Hooks(f(g(h())))`.
func (c *UserOpInfoClient) Use(hooks ...Hook) {
	c.hooks.UserOpInfo = append(c.hooks.UserOpInfo, hooks...)
}

// Create returns a create builder for UserOpInfo.
func (c *UserOpInfoClient) Create() *UserOpInfoCreate {
	mutation := newUserOpInfoMutation(c.config, OpCreate)
	return &UserOpInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserOpInfo entities.
func (c *UserOpInfoClient) CreateBulk(builders ...*UserOpInfoCreate) *UserOpInfoCreateBulk {
	return &UserOpInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserOpInfo.
func (c *UserOpInfoClient) Update() *UserOpInfoUpdate {
	mutation := newUserOpInfoMutation(c.config, OpUpdate)
	return &UserOpInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserOpInfoClient) UpdateOne(uoi *UserOpInfo) *UserOpInfoUpdateOne {
	mutation := newUserOpInfoMutation(c.config, OpUpdateOne, withUserOpInfo(uoi))
	return &UserOpInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserOpInfoClient) UpdateOneID(id int) *UserOpInfoUpdateOne {
	mutation := newUserOpInfoMutation(c.config, OpUpdateOne, withUserOpInfoID(id))
	return &UserOpInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserOpInfo.
func (c *UserOpInfoClient) Delete() *UserOpInfoDelete {
	mutation := newUserOpInfoMutation(c.config, OpDelete)
	return &UserOpInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserOpInfoClient) DeleteOne(uoi *UserOpInfo) *UserOpInfoDeleteOne {
	return c.DeleteOneID(uoi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserOpInfoClient) DeleteOneID(id int) *UserOpInfoDeleteOne {
	builder := c.Delete().Where(useropinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserOpInfoDeleteOne{builder}
}

// Query returns a query builder for UserOpInfo.
func (c *UserOpInfoClient) Query() *UserOpInfoQuery {
	return &UserOpInfoQuery{
		config: c.config,
	}
}

// Get returns a UserOpInfo entity by its id.
func (c *UserOpInfoClient) Get(ctx context.Context, id int) (*UserOpInfo, error) {
	return c.Query().Where(useropinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserOpInfoClient) GetX(ctx context.Context, id int) *UserOpInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserOpInfoClient) Hooks() []Hook {
	return c.hooks.UserOpInfo
}
